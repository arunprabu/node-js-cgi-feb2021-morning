http://localhost:3000 - Home 

API Endpoints for Employee Management App!

Add an Employee - POST 
  http://localhost:3000/api/employees   

List of employees - GET
  http://localhost:3000/api/employees   

Fetch Employee Details  - GET 
  http://localhost:3000/api/employees/1

Update Employee - PUT
  http://localhost:3000/api/employees/1

Delete Employee - DELETE 
  http://localhost:3000/api/employees/1


Topics to Cover
---
  CRUD App
  MySQL 
  Callback Hell
  Promise 
  Observables (ReactiveX / RxJS )
  CORS 
  Deployment
  PM2 (Clustering)

  Day 8
  =---
  File upload with multer
  API Authentication and Security
  oauth2
  Sending E-Mails
  Building Video Conferencing App using WebRTC (Quick Intro)
  Automated Testing
    o Mocha JS
    o Chai JS
    o Chai HTTP to test REST APIâ€™s

  TypeScript 
  Working with TypeScript based Express JS Project (https://github.com/microsoft/TypeScript-Node-Starter)
  
  
  
  Note: Quick demo of RxJS in NodeJS App 

======


Verify JWT Token
---
https://stackabuse.com/authentication-and-authorization-with-jwts-in-express-js/

const accessTokenSecret = 'somerandomaccesstoken';


const authenticateJWT = (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (authHeader) {
        const token = authHeader.split(' ')[1];

        jwt.verify(token, accessTokenSecret, (err, user) => {
            if (err) {
                return res.sendStatus(403);
            }

            req.user = user;
            next(); // call next if token valid
        });
    } else {
        res.sendStatus(401); // send err if token not valid
    }
}


app.get('/books', authenticateJWT, (req, res) => {
    res.json(books);
});